// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: collection/query.proto

package collection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollectionQuery_CollectionsAvailable_FullMethodName = "/collection.CollectionQuery/CollectionsAvailable"
	CollectionQuery_CollectionsPopular_FullMethodName   = "/collection.CollectionQuery/CollectionsPopular"
)

// CollectionQueryClient is the client API for CollectionQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionQueryClient interface {
	// CollectionsAvailable queries list available Collections
	CollectionsAvailable(ctx context.Context, in *CollectionsAvailableRequest, opts ...grpc.CallOption) (*CollectionsAvailableResponse, error)
	// NftsPopular queries list popular Collections
	CollectionsPopular(ctx context.Context, in *CollectionsPopularRequest, opts ...grpc.CallOption) (*CollectionsPopularResponse, error)
}

type collectionQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionQueryClient(cc grpc.ClientConnInterface) CollectionQueryClient {
	return &collectionQueryClient{cc}
}

func (c *collectionQueryClient) CollectionsAvailable(ctx context.Context, in *CollectionsAvailableRequest, opts ...grpc.CallOption) (*CollectionsAvailableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionsAvailableResponse)
	err := c.cc.Invoke(ctx, CollectionQuery_CollectionsAvailable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionQueryClient) CollectionsPopular(ctx context.Context, in *CollectionsPopularRequest, opts ...grpc.CallOption) (*CollectionsPopularResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionsPopularResponse)
	err := c.cc.Invoke(ctx, CollectionQuery_CollectionsPopular_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionQueryServer is the server API for CollectionQuery service.
// All implementations must embed UnimplementedCollectionQueryServer
// for forward compatibility.
type CollectionQueryServer interface {
	// CollectionsAvailable queries list available Collections
	CollectionsAvailable(context.Context, *CollectionsAvailableRequest) (*CollectionsAvailableResponse, error)
	// NftsPopular queries list popular Collections
	CollectionsPopular(context.Context, *CollectionsPopularRequest) (*CollectionsPopularResponse, error)
	mustEmbedUnimplementedCollectionQueryServer()
}

// UnimplementedCollectionQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectionQueryServer struct{}

func (UnimplementedCollectionQueryServer) CollectionsAvailable(context.Context, *CollectionsAvailableRequest) (*CollectionsAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionsAvailable not implemented")
}
func (UnimplementedCollectionQueryServer) CollectionsPopular(context.Context, *CollectionsPopularRequest) (*CollectionsPopularResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionsPopular not implemented")
}
func (UnimplementedCollectionQueryServer) mustEmbedUnimplementedCollectionQueryServer() {}
func (UnimplementedCollectionQueryServer) testEmbeddedByValue()                         {}

// UnsafeCollectionQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionQueryServer will
// result in compilation errors.
type UnsafeCollectionQueryServer interface {
	mustEmbedUnimplementedCollectionQueryServer()
}

func RegisterCollectionQueryServer(s grpc.ServiceRegistrar, srv CollectionQueryServer) {
	// If the following call pancis, it indicates UnimplementedCollectionQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollectionQuery_ServiceDesc, srv)
}

func _CollectionQuery_CollectionsAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionsAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionQueryServer).CollectionsAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionQuery_CollectionsAvailable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionQueryServer).CollectionsAvailable(ctx, req.(*CollectionsAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionQuery_CollectionsPopular_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionsPopularRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionQueryServer).CollectionsPopular(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionQuery_CollectionsPopular_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionQueryServer).CollectionsPopular(ctx, req.(*CollectionsPopularRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectionQuery_ServiceDesc is the grpc.ServiceDesc for CollectionQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collection.CollectionQuery",
	HandlerType: (*CollectionQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectionsAvailable",
			Handler:    _CollectionQuery_CollectionsAvailable_Handler,
		},
		{
			MethodName: "CollectionsPopular",
			Handler:    _CollectionQuery_CollectionsPopular_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collection/query.proto",
}
