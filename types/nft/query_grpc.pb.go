// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: nft/query.proto

package nft

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NftQuery_NftsAtAccount_FullMethodName = "/nft.NftQuery/NftsAtAccount"
	NftQuery_NftsAvailable_FullMethodName = "/nft.NftQuery/NftsAvailable"
	NftQuery_NftsPopular_FullMethodName   = "/nft.NftQuery/NftsPopular"
	NftQuery_PriceHistory_FullMethodName  = "/nft.NftQuery/PriceHistory"
)

// NftQueryClient is the client API for NftQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NftQueryClient interface {
	// NftAtAccount queries list nfts at the given account_id
	NftsAtAccount(ctx context.Context, in *NftsAtAccountRequest, opts ...grpc.CallOption) (*NftsAtAccountResponse, error)
	// NftsAvailable queries list available nfts
	NftsAvailable(ctx context.Context, in *NftsAvailableRequest, opts ...grpc.CallOption) (*NftsAvailableResponse, error)
	// NftsPopular queries list popular nfts
	NftsPopular(ctx context.Context, in *NftsPopularRequest, opts ...grpc.CallOption) (*NftsPopularResponse, error)
	// PriceHistory queries list price of nft
	PriceHistory(ctx context.Context, in *PriceHistoryRequest, opts ...grpc.CallOption) (*PriceHistoryResponse, error)
}

type nftQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewNftQueryClient(cc grpc.ClientConnInterface) NftQueryClient {
	return &nftQueryClient{cc}
}

func (c *nftQueryClient) NftsAtAccount(ctx context.Context, in *NftsAtAccountRequest, opts ...grpc.CallOption) (*NftsAtAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NftsAtAccountResponse)
	err := c.cc.Invoke(ctx, NftQuery_NftsAtAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftQueryClient) NftsAvailable(ctx context.Context, in *NftsAvailableRequest, opts ...grpc.CallOption) (*NftsAvailableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NftsAvailableResponse)
	err := c.cc.Invoke(ctx, NftQuery_NftsAvailable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftQueryClient) NftsPopular(ctx context.Context, in *NftsPopularRequest, opts ...grpc.CallOption) (*NftsPopularResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NftsPopularResponse)
	err := c.cc.Invoke(ctx, NftQuery_NftsPopular_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftQueryClient) PriceHistory(ctx context.Context, in *PriceHistoryRequest, opts ...grpc.CallOption) (*PriceHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PriceHistoryResponse)
	err := c.cc.Invoke(ctx, NftQuery_PriceHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NftQueryServer is the server API for NftQuery service.
// All implementations must embed UnimplementedNftQueryServer
// for forward compatibility.
type NftQueryServer interface {
	// NftAtAccount queries list nfts at the given account_id
	NftsAtAccount(context.Context, *NftsAtAccountRequest) (*NftsAtAccountResponse, error)
	// NftsAvailable queries list available nfts
	NftsAvailable(context.Context, *NftsAvailableRequest) (*NftsAvailableResponse, error)
	// NftsPopular queries list popular nfts
	NftsPopular(context.Context, *NftsPopularRequest) (*NftsPopularResponse, error)
	// PriceHistory queries list price of nft
	PriceHistory(context.Context, *PriceHistoryRequest) (*PriceHistoryResponse, error)
	mustEmbedUnimplementedNftQueryServer()
}

// UnimplementedNftQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNftQueryServer struct{}

func (UnimplementedNftQueryServer) NftsAtAccount(context.Context, *NftsAtAccountRequest) (*NftsAtAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftsAtAccount not implemented")
}
func (UnimplementedNftQueryServer) NftsAvailable(context.Context, *NftsAvailableRequest) (*NftsAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftsAvailable not implemented")
}
func (UnimplementedNftQueryServer) NftsPopular(context.Context, *NftsPopularRequest) (*NftsPopularResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftsPopular not implemented")
}
func (UnimplementedNftQueryServer) PriceHistory(context.Context, *PriceHistoryRequest) (*PriceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceHistory not implemented")
}
func (UnimplementedNftQueryServer) mustEmbedUnimplementedNftQueryServer() {}
func (UnimplementedNftQueryServer) testEmbeddedByValue()                  {}

// UnsafeNftQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NftQueryServer will
// result in compilation errors.
type UnsafeNftQueryServer interface {
	mustEmbedUnimplementedNftQueryServer()
}

func RegisterNftQueryServer(s grpc.ServiceRegistrar, srv NftQueryServer) {
	// If the following call pancis, it indicates UnimplementedNftQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NftQuery_ServiceDesc, srv)
}

func _NftQuery_NftsAtAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftsAtAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftQueryServer).NftsAtAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NftQuery_NftsAtAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftQueryServer).NftsAtAccount(ctx, req.(*NftsAtAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NftQuery_NftsAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftsAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftQueryServer).NftsAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NftQuery_NftsAvailable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftQueryServer).NftsAvailable(ctx, req.(*NftsAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NftQuery_NftsPopular_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftsPopularRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftQueryServer).NftsPopular(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NftQuery_NftsPopular_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftQueryServer).NftsPopular(ctx, req.(*NftsPopularRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NftQuery_PriceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftQueryServer).PriceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NftQuery_PriceHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftQueryServer).PriceHistory(ctx, req.(*PriceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NftQuery_ServiceDesc is the grpc.ServiceDesc for NftQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NftQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nft.NftQuery",
	HandlerType: (*NftQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NftsAtAccount",
			Handler:    _NftQuery_NftsAtAccount_Handler,
		},
		{
			MethodName: "NftsAvailable",
			Handler:    _NftQuery_NftsAvailable_Handler,
		},
		{
			MethodName: "NftsPopular",
			Handler:    _NftQuery_NftsPopular_Handler,
		},
		{
			MethodName: "PriceHistory",
			Handler:    _NftQuery_PriceHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nft/query.proto",
}
