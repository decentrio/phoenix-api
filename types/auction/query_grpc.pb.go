// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: auction/query.proto

package auction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuctionQuery_AuctionsAvailable_FullMethodName = "/auction.AuctionQuery/AuctionsAvailable"
)

// AuctionQueryClient is the client API for AuctionQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctionQueryClient interface {
	// NftsAvailable queries list available Auctions
	AuctionsAvailable(ctx context.Context, in *AuctionsAvailableRequest, opts ...grpc.CallOption) (*AuctionsAvailableResponse, error)
}

type auctionQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionQueryClient(cc grpc.ClientConnInterface) AuctionQueryClient {
	return &auctionQueryClient{cc}
}

func (c *auctionQueryClient) AuctionsAvailable(ctx context.Context, in *AuctionsAvailableRequest, opts ...grpc.CallOption) (*AuctionsAvailableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuctionsAvailableResponse)
	err := c.cc.Invoke(ctx, AuctionQuery_AuctionsAvailable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuctionQueryServer is the server API for AuctionQuery service.
// All implementations must embed UnimplementedAuctionQueryServer
// for forward compatibility.
type AuctionQueryServer interface {
	// NftsAvailable queries list available Auctions
	AuctionsAvailable(context.Context, *AuctionsAvailableRequest) (*AuctionsAvailableResponse, error)
	mustEmbedUnimplementedAuctionQueryServer()
}

// UnimplementedAuctionQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuctionQueryServer struct{}

func (UnimplementedAuctionQueryServer) AuctionsAvailable(context.Context, *AuctionsAvailableRequest) (*AuctionsAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionsAvailable not implemented")
}
func (UnimplementedAuctionQueryServer) mustEmbedUnimplementedAuctionQueryServer() {}
func (UnimplementedAuctionQueryServer) testEmbeddedByValue()                      {}

// UnsafeAuctionQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctionQueryServer will
// result in compilation errors.
type UnsafeAuctionQueryServer interface {
	mustEmbedUnimplementedAuctionQueryServer()
}

func RegisterAuctionQueryServer(s grpc.ServiceRegistrar, srv AuctionQueryServer) {
	// If the following call pancis, it indicates UnimplementedAuctionQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuctionQuery_ServiceDesc, srv)
}

func _AuctionQuery_AuctionsAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionsAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionQueryServer).AuctionsAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuctionQuery_AuctionsAvailable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionQueryServer).AuctionsAvailable(ctx, req.(*AuctionsAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuctionQuery_ServiceDesc is the grpc.ServiceDesc for AuctionQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuctionQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auction.AuctionQuery",
	HandlerType: (*AuctionQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuctionsAvailable",
			Handler:    _AuctionQuery_AuctionsAvailable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auction/query.proto",
}
